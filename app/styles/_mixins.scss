@mixin make-padding($total, $class, $increaseBy) {
  @for $i from 0 through $total {

    @if $class == null {
      .pa-#{$i} {
        padding: $i * $increaseBy;
      }

      .pa-top-#{$i} {
        padding-top: $i * $increaseBy;
      }

      .pa-bottom-#{$i} {
        padding-bottom: $i * $increaseBy;
      }

      .pa-left-#{$i} {
        padding-left: $i * $increaseBy;
      }

      .pa-right-#{$i} {
        padding-right: $i * $increaseBy;
      }
    }
    @else {
      .pa-#{$class}-#{$i} {
        padding: $i * $increaseBy $i * $increaseBy $i * $increaseBy $i * $increaseBy;
      }

      .pa-#{$class}-top-#{$i} {
        padding-top: $i * $increaseBy;
      }

      .pa-#{$class}-bottom-#{$i} {
        padding-bottom: $i * $increaseBy;
      }

      .pa-#{$class}-left-#{$i} {
        padding-left: $i * $increaseBy;
      }

      .pa-#{$class}-right-#{$i} {
        padding-right: $i * $increaseBy;
      }
    }
  }
}

@mixin make-margin($total, $class, $increaseBy) {
  @for $i from 0 through $total {

    @if $class == null {
      .ma-#{$i} {
        margin: $i * $increaseBy;
      }

      .ma-top-#{$i} {
        margin-top: $i * $increaseBy;
      }

      .ma-bottom-#{$i} {
        margin-bottom: $i * $increaseBy;
      }

      .ma-left-#{$i} {
        margin-left: $i * $increaseBy;
      }

      .ma-right-#{$i} {
        margin-right: $i * $increaseBy;
      }
    }
    @else {
      .ma-#{$class}-#{$i} {
        margin: $i * $increaseBy $i * $increaseBy $i * $increaseBy $i * $increaseBy;
      }

      .ma-#{$class}-top-#{$i} {
        margin-top: $i * $increaseBy;
      }

      .ma-#{$class}-bottom-#{$i} {
        margin-bottom: $i * $increaseBy;
      }

      .ma-#{$class}-left-#{$i} {
        margin-left: $i * $increaseBy;
      }

      .ma-#{$class}-right-#{$i} {
        margin-right: $i * $increaseBy;
      }
    }
  }
}

@mixin position($type,$left,$right,$top,$bottom) {
  position: $type;
  left: $left;
  right: $right;
  top: $top;
  bottom: $bottom;
}

@mixin translateX($value) {
  -webkit-transform: translateX($value);
  -ms-transform: translateX($value);
  -o-transform: translateX($value);
  transform: translateX($value);
}

@mixin translate-show() {
  @include translateX(0);
  transition: transform 0.6s ease-out 0.5s;
}

@mixin translate-hide($value) {
  @include translateX($value);
  transition: transform 0.5s ease-in 0s;
}


@mixin respond-to($media) {
  @if $media == xs {
    @media only screen and (max-width: $screen-xs-max) { @content; }
  }
  @else if $media == s {
    @media only screen and (min-width: $screen-sm-min) and (max-width: $screen-sm-max- 1) { @content; }
  }
  @else if $media == s {
    @media only screen and (min-width: $screen-md-max) and (max-width: $break-large - 1) { @content; }
  }
  @else if $media == lg {
    @media only screen and (min-width: $screen-lg-min) { @content; }
  }
}


